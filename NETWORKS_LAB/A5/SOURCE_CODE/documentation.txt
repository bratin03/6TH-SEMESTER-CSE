-------------Student Information-------------
---------------------------------------------
Student Name: Bratin Mondal
Student ID: 21CS10016
---------------------------------------------
Student Name: Somya Kumar
Student ID: 21CS30050
---------------------------------------------
---------------------------------------------

-----------------------------------------------------------
Documentation for CS39006: Networks Laboratory Assignment 5
-----------------------------------------------------------


///////////////////////////////////////////////////////////////////////

Statistics Table:

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| P value | Total Messages Sent | Total Message Transmissions | Total ACKs Sent | Average Message Transmissions per Message | Average ACKs Sent per Message | Average Total Transmissions (Message + ACK) per Message |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.05    | 500                 | 588                         | 619             | 1.176000                                  | 1.238000                      | 2.414000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.10    | 500                 | 628                         | 618             | 1.256000                                  | 1.236000                      | 2.492000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.15    | 500                 | 715                         | 662             | 1.430000                                  | 1.324000                      | 2.754000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.20    | 500                 | 805                         | 692             | 1.610000                                  | 1.384000                      | 2.994000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.25    | 500                 | 859                         | 707             | 1.718000                                  | 1.414000                      | 3.132000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.30    | 500                 | 988                         | 722             | 1.976000                                  | 1.444000                      | 3.420000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.35    | 500                 | 1137                        | 796             | 2.274000                                  | 1.592000                      | 3.866000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.40    | 500                 | 1357                        | 832             | 2.714000                                  | 1.664000                      | 4.378000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.45    | 500                 | 1605                        | 842             | 3.210000                                  | 1.684000                      | 4.894000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.50    | 500                 | 1814                        | 886             | 3.628000                                  | 1.772000                      | 5.400000                                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////
msocket.h and msocket.c:
    - These files contain the implementation of the msocket library.

-----------------------------------------------------------------------
Macros:
    - T: The timeout value for the sender.
    - RECV_BUFF_SIZE: The size of the receive buffer.
    - SEND_BUFF_SIZE: The size of the send buffer.
    - MAX_SEQ_NUM: The maximum sequence number that can be used.
    - MSG_SIZE: The size of the message that can be sent.
    - N: The maximum number of shared memory entries.
    - SOCK_MTP: The socket type for the msocket.
    - P: The probability of packet loss.

-----------------------------------------------------------------------

Data Structures:

swnd:
    - Type: struct
    - Description: This structure is used to represent the send window of the sender.
    - Members:
        - int window_size : The size of the window at the current moment. It is initialized to RECV_BUFF_SIZE and is updated based on the ACKs received.
        - int last_seq_ack : The last sequence number that was acknowledged by the receiver. It is initialized to 0. It is updated based on the ACKs received.
        - int buffer_is_valid [SEND_BUFF_SIZE] : An array of size SEND_BUFF_SIZE that stores whether the data at the corresponding index in the send buffer is valid or not. It is initialized to 0.
            - If the message at a particular index is garbage, then buffer_is_valid[i] = 0 ( Either the application user has not written anything in the buffer or the message has been sent and acknowledged).
            - If the message at a particular index has been written by the application user and has not been sent even once then buffer_is_valid[i] = 1.
            - If the message at a particular index has been sent but not acknowledged then buffer_is_valid[i] = 2.
        - int seq_buf_index_map [MAX_SEQ_NUM] : An array of size MAX_SEQ_NUM which is used to map the sequence number to the index of the buffer in the send buffer. It is updated based on the sequence number of the message. This field is neccessary since the sequence number and the buffer index change over time.
        - time_t timeout [MAX_SEQ_NUM]: An array of size MAX_SEQ_NUM which stores the time at which the message was last sent. It is used to calculate the timeout for the message.
        - int last_buf_index: The last index of the buffer that was written by the application user. It is initialized to 0 and is updated based on the application user writes.

rwnd:
    - Type: struct
    - Description: This structure is used to represent the receive window of the receiver.
    - Members:    
        - int to_deliver : The index of the message in buffer that is to be delivered to the application user. Updated when the receiver receives a message.
        - int window_size : The size of the window at the current moment. It is initialized to RECV_BUFF_SIZE and is updated based on the messages received and when the application user reads the message.
        - int last_inorder_packet : The last sequence number that was received in order. It is initialized to 0. It is updated based on the messages received.
        - int buffer_is_valid [RECV_BUFF_SIZE] : An array of size RECV_BUFF_SIZE that stores whether the data at the corresponding index in the receive buffer is valid or not. It is initialized to 0.
            - If the message at a particular index is garbage, then buffer_is_valid[i] = 0 ( Either the sender has not sent anything in the buffer or the message has been read by the application user).
            - If the message at a particular index has been sent by the sender and has not been read by the application user then buffer_is_valid[i] = 1.
        - int seq_buf_index_map [MAX_SEQ_NUM] : An array of size MAX_SEQ_NUM which is used to map the sequence number to the index of the buffer in the receive buffer. It is updated based on the sequence number of the message. This field is neccessary since the sequence number and the buffer index change over time.    
        - int nospace : A flag that is set when the receiver does not have enough space to store the message. It is used to inform the sender that the receiver is not ready to receive the message.

shared_memory:
    - Type: struct
    - Description: This structure is used to represent an entry in the shared memory table
    - Members:
        - int is_available : A flag that is set when the particular row in the shared memory table is available. It is used to check if the entry is available or not.
        - pid_t pid : The process id of the process that is using this socket for send.
        - int src_sock : The socket descriptor of the sender.
        - struct in_addr dest_ip : The IP address of the receiver.
        - int dest_port : The port number of the receiver.
        - char recv_buff[RECV_BUFF_SIZE][MSG_SIZE] : A 2D array of size RECV_BUFF_SIZE x MSG_SIZE that is used to store the messages received by the receiver.
        - char send_buff[SEND_BUFF_SIZE][MSG_SIZE] : A 2D array of size SEND_BUFF_SIZE x MSG_SIZE that is used to store the messages to be sent by the sender.
        - struct swnd send_window : The send window of the sender.
        - struct rwnd receive_window : The receive window of the receiver.

-----------------------------------------------------------------------

Functions:

void reset_sock_info:
    - Description: This function resets the values of the given SOCK_INFO structure.
    - Arguments:
        - struct SOCK_INFO *SI : The pointer to the SOCK_INFO structure to be reset.
    - Return Value: void

int m_socket:
    - Description: This function creates a new socket with the specified domain, type, and protocol.
    - Arguments:
        - int domain : The domain of the socket (must be AF_INET).
        - int type : The type of the socket (must be SOCK_MTP).
        - int protocol : The protocol of the socket (must be 0).
    - Return Value: The index of the new socket in the table, or -1 if an error occurred.

int m_bind:
    - Description: This function binds a socket to a specific source and destination address.
    - Arguments:
        - int sockfd : The socket file descriptor.
        - const struct sockaddr *src_addr : Pointer to the source address structure.
        - socklen_t addrlen : Length of the source address structure.
        - const struct sockaddr *dest_addr : Pointer to the destination address structure.
        - socklen_t addrlen1 : Length of the destination address structure.
    - Return Value: 0 on success, -1 on failure.

int m_sendto:
    - Description: This function sends a message to a destination address using a socket. More specifically, it writes the message to the send buffer of the socket.
    - Arguments:
        - int sockfd : The socket file descriptor.
        - const void *buf : Pointer to the buffer containing the message to be sent.
        - size_t len : The length of the message in bytes.
        - int flags : Flags to modify the behavior of the send operation (currently not supported).
        - const struct sockaddr *dest_addr : Pointer to a sockaddr structure containing the destination address.
        - socklen_t addrlen : The length of the destination address structure.
    - Return Value: On success, returns the number of bytes sent. On failure, returns -1 and sets errno accordingly.


int m_recvfrom:
    - Description: This function receives a message from a socket. More specifically, it reads the message from the receive buffer of the socket.
    - Arguments:
        - int sockfd : The socket file descriptor.
        - void *buf : Pointer to the buffer where the received message will be stored.
        - size_t len : The maximum length of the message to be received.
        - int flags : Flags that modify the behavior of the receive operation (currently not supported).
        - struct sockaddr *src_addr : Pointer to a sockaddr structure that will be filled with the source address information.
        - socklen_t *addrlen : Pointer to the length of the src_addr structure.
    - Return Value: On success, returns the length of the received message. On failure, returns -1 and sets errno accordingly.
    
int m_close:
    - Description: Closes the socket with the given file descriptor. More specifically, it marks the socket as available in the shared memory.
    - Arguments:
        - int sockfd : The socket file descriptor.
    - Return Value: 0 on success, -1 on failure.

int drop_message:
    - Description: This function simulates packet loss by dropping a message with a certain probability.
    - Arguments:
        - float p : The probability of dropping the message.
    - Return Value: 1 if the message is dropped, 0 otherwise.

///////////////////////////////////////////////////////////////////////

initmsocket.c:
    - This file implements the R, S, Garbage Collector and Main thread

-----------------------------------------------------------------------

The header details is given in the initmsocket.c file.

Macros:
    - ACK_SIZE: The size of the ACK message.
    - SP_MSG_SIZE: The size of the special message.

-----------------------------------------------------------------------

Data Structures:

shmid:
    - Type: int
    - Description: The shared memory identifier for the table.

shmid_1:
    - Type: int
    - Description: The shared memory identifier for the SOCK_INFO structure.

SM:
    - Type: struct shared_memory *
    - Description: A pointer to the shared memory table.

SI:
    - Type: struct SOCK_INFO *
    - Description: A pointer to the SOCK_INFO structure.

table_lock:
    - Type: int
    - Description: The lock for the shared memory table.

sem_1:
    - Type: int
    - Description: The semaphore for implementation of m_socket and m_bind.

sem_2:
    - Type: int
    - Description: The semaphore for implementation of m_socket and m_bind.

sock_info_lock:
    - Type: int
    - Description: The lock for the SOCK_INFO structure.

sem_row:
    - Type: int[N]
    - Description: An array of semaphores for each row in the shared memory table.

int msg_count:
    - Type: int
    - Description: The count of total messages sent. Used for printing statistics.

int msg_send_count:
    - Type: int
    - Description: The count of total number of message transmissions. Used for printing statistics.

int ack_count:
    - Type: int
    - Description: The count of total number of ACKs sent. Used for printing statistics.

-----------------------------------------------------------------------

Functions:

void sig_handler:
    - Description: Signal handler for SIGQUIT and SIGINT signals. It clears the shared memory and exits the program. It also prints the statistics if DSTAT is defined.
    - Arguments:
        - int signo : The signal number.
    - Return Value: void

void decimal_to_binary:
    - Description: Converts a decimal number (0-15) to a binary representation.
    - Arguments:
        - int decimal : The decimal number to convert.
        - char *buffer : The buffer to store the binary representation.
    - Return Value: void

void send_ack:
    - Description: Sends an acknowledgment packet over a socket.
    - Arguments:
        - int sock : The socket descriptor.
        - struct in_addr dest_ip : The destination IP address.
        - int dest_port : The destination port number.
        - int seq_num : The sequence number of the acknowledgment.
        - int window_size : The window size of the acknowledgment.
        - int ack_type : The type of the acknowledgment.
    - Return Value: void

void send_msg:
    - Description: Sends a message over a socket to a specified destination IP and port.
    - Arguments:
        - int sock : The socket descriptor.
        - struct in_addr dest_ip : The destination IP address.
        - int dest_port : The destination port number.
        - int seq_num : The sequence number of the message.
        - char *msg : The message to be sent.
    - Return Value: void

void send_empty_msg:
    - Description: Sends an empty message (01) to the specified destination IP and port using the given socket.
    - Arguments:
        - int sock : The socket to send the message from.
        - struct in_addr dest_ip : The destination IP address.
        - int dest_port : The destination port number.
    - Return Value: void

int binary_to_decimal:
    - Description: Converts a binary string to its decimal equivalent.
    - Arguments:
        - char *binary : The binary string to be converted.
        - int size : The size of the binary string.
    - Return Value: The decimal equivalent of the binary string.

void *Garbage_Collector:
    - Description: Garbage collector function that checks for dead processes and cleans up resources.
    - Arguments: None
    - Return Value: void *

void *R_Thread:
    - Description: The function that handles incoming packets from multiple sockets. It uses the select system call to monitor the sockets for incoming data. When a packet is received, it processes the packet and updates the receive window for the corresponding socket. If the receive window becomes full, it sends an acknowledgment indicating that there is no space available. If the receive window has space available, it sends an acknowledgment indicating the last in-order packet received and the current window size. The R_Thread function runs in an infinite loop, continuously monitoring the sockets for incoming packets.
    - Arguments: None
    - Return Value: void *

void *S_Thread:
    - Description: The function that handles sending packets from the send window. It continuously checks each table entry in the send window and sends packets if they are available. It uses a sleep time to control the rate of sending packets. If a packet needs to be resent due to a timeout, it updates the timeout value and resends the packet.
    - Arguments: None
    - Return Value: void *

int main:
    - Description: The main function of the program. It initializes the shared memory and semaphores, creates the Garbage Collector, R_Thread, and S_Thread threads, and handles the socket initialization and binding requests.
    - Arguments: None
    - Return Value: 0 on successful execution.

///////////////////////////////////////////////////////////////////////

